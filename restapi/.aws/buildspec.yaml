version: 0.2

phases:
  install:
    runtime-versions:
      golang: 1.24

  pre_build:
    commands:
      # only trigger build on changes in restapi directory
      - echo "Checking for changes in restapi/"
      - |
        if ! git diff --name-only HEAD~1 HEAD | grep -q '^restapi/'; then
          echo "No changes in restapi/, skipping build."
          exit 0
        fi

      # change to restapi directory
      - cd restapi

      # Set build variables and fetch secrets
      - set -euo pipefail
      - |
        export GIT_SHA=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
        export IMAGE_TAG=$GIT_SHA-$CODEBUILD_BUILD_NUMBER
      # replace taskdef variables
      - sed -i "s|<AWS_ACCOUNT_ID>|${AWS_ACCOUNT_ID}|g" .aws/taskdef.json
      - sed -i "s|<AWS_REGION>|${AWS_REGION}|g" .aws/taskdef.json
      - sed -i "s|<EXECUTION_ROLE_ARN>|${ECS_TASK_EXECUTION_ROLE_ARN}|g" .aws/taskdef.json
      - sed -i "s|<TASK_ROLE_ARN>|${ECS_TASK_ROLE_ARN}|g" .aws/taskdef.json
      # ECR login
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      # Install dependencies
      - go mod download

      # Build Go application
      - go build -v ./...

      # Run unit and integration tests
      - make test-unit
      - make test-integration

      # Build Docker images for production
      - |
        docker build \
          --platform=linux/amd64 \
          --build-arg APP_VERSION=$IMAGE_TAG \
          -t $ECR_REPO_BACKEND:$IMAGE_TAG \
          -t $ECR_REPO_BACKEND:latest \
          -f Dockerfile.prod \
          .

  post_build:
    commands:
      # Push images
      - docker push $ECR_REPO_BACKEND:$IMAGE_TAG
      - docker push $ECR_REPO_BACKEND:latest
      # Create deployment artifacts
      - echo "[{\"name\":\"backend\",\"imageUri\":\"$ECR_REPO_BACKEND:$IMAGE_TAG\"}]" > imagedefinitions.json
      - cp .aws/appspec.yaml ./appspec.yaml
      - cp .aws/taskdef.json ./taskdef.json
      # Clean up CI artifacts
      # - make ci-clean

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yaml
    - taskdef.json
  base-directory: "restapi"
