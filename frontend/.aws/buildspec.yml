version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 22

  pre_build:
    commands:
      # Only trigger build on changes in frontend directory
      - echo "Checking for changes in frontend/"
      - |
        if ! git diff --name-only HEAD~1 HEAD | grep -q '^frontend/'; then
          echo "No changes in frontend/, skipping build."
          exit 0
        fi

      # Change to frontend directory
      - cd frontend

      # Set build variables
      - set -euo pipefail
      - |
        export GIT_SHA=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c1-7)
        export IMAGE_TAG=$GIT_SHA-$CODEBUILD_BUILD_NUMBER

      # Replace taskdef template variables
      - sed -i "s|<AWS_REGION>|${AWS_DEFAULT_REGION}|g" .aws/taskdef.json
      - sed -i "s|<EXECUTION_ROLE_ARN>|${ECS_TASK_EXECUTION_ROLE_ARN}|g" .aws/taskdef.json
      - sed -i "s|<TASK_ROLE_ARN>|${ECS_TASK_ROLE_ARN}|g" .aws/taskdef.json

      # ECR login
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

  build:
    commands:
      # Install dependencies
      - npm ci

      # Run tests and linting
      - npm run lint
      - npm run build

      # Install Playwright browsers
      - npx playwright install --with-deps

      # Run Playwright tests
      - npx playwright test

      # Build Docker image for production
      - |
        docker build \
          --platform=linux/amd64 \
          --build-arg NODE_ENV=production \
          --build-arg BASE_URL=$BASE_URL \
          --build-arg WEBSOCKET_URL=$WEBSOCKET_URL \
          -t $ECR_REPO_FRONTEND:$IMAGE_TAG \
          -t $ECR_REPO_FRONTEND:latest \
          -f compose/Dockerfile.prod \
          .

  post_build:
    commands:
      # Push images to ECR
      - docker push $ECR_REPO_FRONTEND:$IMAGE_TAG
      - docker push $ECR_REPO_FRONTEND:latest

      # Create deployment artifacts for CodeDeploy ECS
      - echo "[{\"name\":\"frontend\",\"imageUri\":\"$ECR_REPO_FRONTEND:$IMAGE_TAG\"}]" > imagedefinitions.json
      - cp .aws/appspec.yaml ./appspec.yaml
      - cp .aws/taskdef.json ./taskdef.json

artifacts:
  files:
    - imagedefinitions.json
    - appspec.yaml
    - taskdef.json
  base-directory: "frontend"
