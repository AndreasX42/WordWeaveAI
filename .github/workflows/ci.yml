name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

# Cancel previous runs on new pushes to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job to detect changes in different folders
  changes:
    runs-on: ubuntu-latest
    outputs:
      agent: ${{ steps.changes.outputs.agent }}
      frontend: ${{ steps.changes.outputs.frontend }}
      restapi: ${{ steps.changes.outputs.restapi }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            agent:
              - 'agent/**'
            frontend:
              - 'frontend/**'
            restapi:
              - 'restapi/**'

  # Agent Python tests
  test-agent:
    needs: changes
    if: needs.changes.outputs.agent == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        working-directory: ./agent
        run: |
          python -m pip install --upgrade pip
          uv pip install --system -r requirements_test.txt

      - name: Run unit tests
        working-directory: ./agent
        env:
          DYNAMODB_VOCAB_TABLE_NAME: test-vocab-table
          DYNAMODB_VOCAB_MEDIA_TABLE_NAME: test-media-table
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
        run: |
          python -m pytest tests/units -v --tb=short

      # - name: Run integration tests
      #   working-directory: ./agent
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
      #     PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      #   run: |
      #     python -m pytest tests/integrations -v --tb=short

  # Frontend Angular tests
  test-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: ./frontend
        run: npx playwright test

    # RestAPI Go tests
  test-restapi:
    needs: changes
    if: needs.changes.outputs.restapi == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go 1.24
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Install dependencies
        working-directory: ./restapi
        run: go mod download

      - name: Build Go application
        working-directory: ./restapi
        run: go build -v ./...

      - name: Run unit tests
        working-directory: ./restapi
        run: make test-unit

      - name: Run integration tests
        working-directory: ./restapi
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          DYNAMODB_ENDPOINT: http://localhost:8081
        run: make test-integration

  # Summary job that runs only if all applicable tests pass
  ci-success:
    runs-on: ubuntu-latest
    needs: [changes, test-agent, test-frontend, test-restapi]
    if: always()
    steps:
      - name: Check all tests passed
        run: |
          # Check if any of the test jobs failed
          if [ "${{ needs.test-agent.result }}" = "failure" ] || 
             [ "${{ needs.test-frontend.result }}" = "failure" ] || 
             [ "${{ needs.test-restapi.result }}" = "failure" ]; then
            echo "One or more test jobs failed"
            exit 1
          fi

          # Check if any test jobs were skipped but should have run
          if [ "${{ needs.changes.outputs.agent }}" = "true" ] && [ "${{ needs.test-agent.result }}" = "skipped" ]; then
            echo "Agent tests were skipped but should have run"
            exit 1
          fi

          if [ "${{ needs.changes.outputs.frontend }}" = "true" ] && [ "${{ needs.test-frontend.result }}" = "skipped" ]; then
            echo "Frontend tests were skipped but should have run"
            exit 1
          fi

          if [ "${{ needs.changes.outputs.restapi }}" = "true" ] && [ "${{ needs.test-restapi.result }}" = "skipped" ]; then
            echo "RestAPI tests were skipped but should have run"
            exit 1
          fi

          echo "All applicable tests passed!"

      - name: Report test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Changed | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Agent | ${{ needs.changes.outputs.agent }} | ${{ needs.test-agent.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.changes.outputs.frontend }} | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| RestAPI | ${{ needs.changes.outputs.restapi }} | ${{ needs.test-restapi.result }} |" >> $GITHUB_STEP_SUMMARY
